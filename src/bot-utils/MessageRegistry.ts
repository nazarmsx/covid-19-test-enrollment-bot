import { injectable } from "tsyringe";

export enum Lang {
    UK = 'uk',
    RU = 'ru',
    EN = 'en'
}

export interface Translations {
    getPassType: string;
    getPassTypeFinished: string;
    getPassTypeExpress: string;

    getLanguage: string;
    register: string;
    getTestType: 'Choose test type:',
    getName: string;
    setLangUk: string;
    setLangRu: string;
    setLangEn: string;
    getTestTypeExpress: string;
    getTestTypePcr: string;
    finalMessage: string;
    getGender: string;
    getGenderMale: string;
    getGenderFemale: string;
    getBirthDate: string;
    getEmail: string;
    getPhoneNumber: string;
    getTestDate: string;
    getTestPurposeType: string;
    getTestPurposeDeparture: string;
    getTestPurposeArrival: string;
    greetingMessage: string;
    startFromBeginning: string;
    newRequest: string;
    today: string;
    tomorrow: string;
    afterTomorrow: string;
    phoneNumberSaved: string;
    getOtherPhoneNumber: string;
    sharePhoneNumber: string;
    getPaymentType: string;
    paymentTypeOffline: string;
    paymentTypeOnline: string;
    goToPayment: string;
    getQR: string;
    btnDescription: string;
    sharePhoneNumberViber: string;
    sendMessageToStart: string;
    languageChangedMsg: string;
    wrongDateFormat: string;
    paymentTypeOfflineKyiv: string;
    paymentTypeOfflineOdesa: string;
    btnDescriptionOffline: string;

    [key: string]: any;
}


@injectable()
export class MessageRegistry {
    public isLanguageSupported(lang: string) {
        return [Lang.UK, Lang.RU].indexOf(lang as Lang) !== -1
    }

    public getTranslations(lang: string = Lang.EN): Translations {
        if (!lang || !this.isLanguageSupported(lang)) {
            lang = Lang.EN;
        }
        const translations: { [key: string]: any } = {
            [Lang.EN]: {
                getPassType: 'Choose control type:',
                getPassTypeFinished: 'Upload test results',
                getPassTypeExpress: 'Pass the Covid test at the entrance',

                getLanguage: 'Choose language',
                register: 'New register!',
                getTestType: 'Choose COVID test type:',
                getName: 'Enter your name:',
                setLangUk: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶',
                setLangRu: '–†—É—Å—Å–∫–∏–π üá∑üá∫',
                setLangEn: 'English üá¨üáß',
                getTestTypeExpress: 'Express Test Antigen',
                getTestTypePcr: 'PCR Test',
                finalMessage: 'Great  üëç !Your request in processing now!',
                getGender: 'Select your gender:',
                getGenderMale: 'Male üë®',
                getGenderFemale: 'Female üë©',
                getBirthDate: 'Enter the date of birth in following format dd-mm-yyyy :',
                getEmail: 'Enter your email address:',
                getPhoneNumber: 'Enter the phone number or press button below:',
                getTestDate: 'Enter the desired test date  in following format dd-mm-yyyy :',
                getTestPurposeType: 'Choose the purpose of the test',
                getTestPurposeDeparture: 'For departure üõ´',
                getTestPurposeArrival: 'For arrival üõ¨',
                greetingMessage: 'Hi there üëã! To register for the test, answer a few questions.',
                startFromBeginning: 'Start from beginning',
                newRequest: 'Register new passenger',
                today: 'Today',
                tomorrow: 'Tomorrow',
                afterTomorrow: 'After tomorrow',
                phoneNumberSaved: 'Phone number saved ‚úî',
                boryspil: 'Boryspil',
                odesa: 'Odesa',
                yes: 'Yes',
                no: 'No',
                askPhoneIsRegisteredInDiia: 'Is the app \'Diy vdoma\'  installed on this number?',
                getOtherPhoneNumber: 'Enter the phone number:',
                sharePhoneNumber: 'Use phone number from Telegram',
                getPaymentType: 'Select payment type üí≥:',
                paymentTypeOffline: 'Offline',
                paymentTypeOnline: 'Online',
                goToPayment: 'Go to payment',
                getQR: 'Get a QR code',
                btnDescription: 'Follow the link below',
                sharePhoneNumberViber: 'Use phone number from Viber',
                sendMessageToStart: 'Write a message to get started.',
                languageChangedMsg: 'Language changed to üá¨üáß',
                wrongDateFormat: 'Invalid date format ‚ùå',
                paymentTypeOfflineKyiv: 'In airport',
                paymentTypeOfflineOdesa: 'Mastercard',
                btnDescriptionOffline: 'Congratulations! You have successfully registered. Now open the QR code and show it to our manager at the airport',
                kharkiv: 'Kharkiv'
            },
            [Lang.UK]: {
                getPassType: '–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª—é:',
                getPassTypeFinished: '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤',
                getPassTypeExpress: 'Pass the Covid test at the entrance',

                getLanguage: '–í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É',
                register: '–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è',
                getTestType: '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Ç–µ—Å—Ç—É',
                getName: '–í–≤–µ–¥—ñ—Ç—å –ü–Ü–ë:',
                setLangUk: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶',
                setLangRu: '–†—É—Å—Å–∫–∏–π üá∑üá∫',
                setLangEn: 'English üá¨üáß',
                getTestTypeExpress: '–ï–∫—Å–ø—Ä–µ—Å-—Ç–µ—Å—Ç –Ω–∞ –∞–Ω—Ç–∏–≥–µ–Ω',
                getTestTypePcr: '–ü–õ–† —Ç–µ—Å—Ç',
                finalMessage: '–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è üëç! –í–∞—à –∑–∞–ø–∏—Ç –∑–∞—Ä–∞–∑ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è!',
                getGender: '–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:',
                getGenderMale: '–ß–æ–ª–æ–≤—ñ–∫ üë®',
                getGenderFemale: '–ñ—ñ–Ω–∫–∞ üë©',
                getBirthDate: '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥-–º–º-—Ä—Ä—Ä—Ä :',
                getEmail: '–í–≤–µ–¥—ñ—Ç—å email –∞–¥—Ä–µ—Å—É:',
                getPhoneNumber: '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ:',
                getTestDate: '–í–≤–µ–¥—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥–∞—Ç—É —Ç–µ—Å—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–¥-–º–º-—Ä—Ä—Ä—Ä :',
                getTestPurposeType: '–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ—Å—Ç—É',
                getTestPurposeDeparture: '–î–ª—è –≤–∏–ª—å–æ—Ç—É üõ´',
                getTestPurposeArrival: '–î–ª—è –ø—Ä–∏–±—É–≤–∞—é—á–∏—Ö üõ¨',
                greetingMessage: '–ü—Ä–∏–≤—ñ—Ç üëã! –î–ª—è —Ä–µ—î—Å—Ç–∞—Ä—Ü—ñ—ó –Ω–∞ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç—É, –¥–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –¥–µ–∫—ñ–ª—å–∫–∞ –ø–∏—Ç–∞–Ω—å.',
                startFromBeginning: '–ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É',
                newRequest: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ —â–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Å–∞–∂–∏—Ä–∞',
                today: '–°—å–æ–≥–æ–¥–Ω—ñ',
                tomorrow: '–ó–∞–≤—Ç—Ä–∞',
                afterTomorrow: '–ü—ñ—Å–ª—è–∑–∞–≤—Ç—Ä–∞',
                phoneNumberSaved: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ ‚úî',
                boryspil: '–ë–æ—Ä–∏—Å–ø—ñ–ª—å',
                odesa: '–û–¥–µ—Å–∏',
                yes: '–¢–∞–∫',
                no: '–ù—ñ',
                askPhoneIsRegisteredInDiia: '–î–æ–¥–∞—Ç–æ–∫ –î—ñ–π –≤–¥–æ–º–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Ü–µ–π –Ω–æ–º–µ—Ä?',
                getOtherPhoneNumber: '–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:',
                sharePhoneNumber: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ Telegram',
                getPaymentType: '–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –æ–ø–ª–∞—Ç–∏ üí≥:',
                paymentTypeOffline: '–û—Ñ–ª–∞–π–Ω',
                paymentTypeOnline: '–û–Ω–ª–∞–π–Ω',
                goToPayment: '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏',
                getQR: '–û—Ç—Ä–∏–º–∞—Ç–∏ QR –∫–æ–¥',
                btnDescription: '–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ: ',
                sharePhoneNumberViber: '–í–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ Viber',
                sendMessageToStart: '–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —â–æ–± –ø–æ—á–∞—Ç–∏.',
                languageChangedMsg: '–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ üá∫üá¶ ',
                wrongDateFormat: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ ‚ùå',
                paymentTypeOfflineKyiv: '–í –∞–µ—Ä–æ–ø–æ—Ä—Ç—É',
                paymentTypeOfflineOdesa: '–ú–∞—Å—Ç–µ—Ä–∫–∞—Ä–¥',
                btnDescriptionOffline: '–í—ñ—Ç–∞—é! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∏—Å—è. –¢–µ–ø–µ—Ä –≤—ñ–¥–∫—Ä–∏–π—Ç–µ QR –∫–æ–¥ —ñ –ø–æ–∫–∞–∂—ñ—Ç—å –π–æ–≥–æ –Ω–∞—à–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É',
                kharkiv: '–•–∞—Ä–∫—ñ–≤'
            },
            [Lang.RU]: {
                getPassType: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—è:',
                getPassTypeFinished: '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤',
                getPassTypeExpress: '–ó–¥–∞—Ç–∏ —Ç–µ—Å—Ç –Ω–∞ –≤—Ö–æ–¥—ñ',

                getLanguage: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫',
                register: '–ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è',
                getTestType: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞',
                getName: '–í–≤–µ–¥–∏—Ç–µ –§–ò–û:',
                setLangUk: '–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶',
                setLangRu: '–†—É—Å—Å–∫–∏–π üá∑üá∫',
                setLangEn: 'English üá¨üáß',
                getTestTypeExpress: '–≠–∫—Å–ø—Ä–µ—Å—Å —Ç–µ—Å—Ç –Ω–∞ –∞–Ω—Ç–∏–≥–µ–Ω',
                getTestTypePcr: '–ü–¶–† —Ç–µ—Å—Ç',
                finalMessage: '–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å —Å–µ–π—á–∞—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!',
                getGender: '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:',
                getGenderMale: '–ú—É–∂—Å–∫–æ–π üë®',
                getGenderFemale: '–ñ–µ–Ω—Å–∫–∏–π üë©',
                getBirthDate: '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥ :',
                getEmail: '–í–≤–µ–¥–∏—Ç–µ email –∞–¥—Ä–µ—Å:',
                getPhoneNumber: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
                getTestDate: '–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É —Ç–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥-–º–º-–≥–≥–≥–≥ :',
                getTestPurposeType: '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞',
                getTestPurposeDeparture: '–î–ª—è –≤—ã–ª–µ—Ç–∞—é—â–∏—Ö üõ´',
                getTestPurposeArrival: '–î–ª—è –ø—Ä–∏–±—ã–≤–∞—é—â–∏—Ö üõ¨',
                greetingMessage: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.',
                startFromBeginning: '–ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞',
                newRequest: '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –ø–∞—Å—Å–∞–∂–∏—Ä–∞',
                today: '–°–µ–≥–æ–¥–Ω—è',
                tomorrow: '–ó–∞–≤—Ç—Ä–∞',
                afterTomorrow: '–ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞',
                phoneNumberSaved: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω ‚úî',
                boryspil: '–ë–æ—Ä–∏—Å–ø–æ–ª—å',
                odesa: '–û–¥–µ—Å—Å—ã ',
                yes: '–î–∞',
                no: '–ù–µ—Ç',
                askPhoneIsRegisteredInDiia: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –î–∏–π –≤–¥–æ–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä?',
                getOtherPhoneNumber: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                sharePhoneNumber: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ Telegram',
                getPaymentType: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç—ã üí≥:',
                paymentTypeOffline: '–û—Ñ—Ñ–ª–∞–π–Ω',
                paymentTypeOnline: '–û–Ω–ª–∞–π–Ω',
                goToPayment: '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                getQR: '–ü–æ–ª—É—á–∏—Ç—å QR –∫–æ–¥',
                btnDescription: '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ',
                sharePhoneNumberViber: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ Viber',
                sendMessageToStart: '–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.',
                languageChangedMsg: '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω üá∑üá∫',
                wrongDateFormat: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã ‚ùå',
                paymentTypeOfflineKyiv: '–í –∞—ç—Ä–æ–ø–æ—Ä—Ç—É',
                paymentTypeOfflineOdesa: '–ú–∞—Å—Ç–µ—Ä–∫–∞—Ä–¥',
                btnDescriptionOffline: '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ QR –∫–æ–¥ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ –µ–≥–æ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç—É',
                kharkiv: '–•–∞—Ä—å–∫–æ–≤'
            }
        };
        return translations[lang];
    }

    public isCommandName(textString: string) {
        const commands = [
            this.getTranslations(Lang.EN).startFromBeginning,
            this.getTranslations(Lang.EN).newRequest,
            this.getTranslations(Lang.UK).startFromBeginning,
            this.getTranslations(Lang.UK).newRequest,
            this.getTranslations(Lang.RU).startFromBeginning,
            this.getTranslations(Lang.RU).newRequest,
        ];
        return commands.indexOf(textString) !== -1;
    }

    public getGreetingMessage(lang: Lang, region: string) {
        const translations: { [key: string]: any } = {
            [Lang.EN]: {
                greetingMessage: () => `Hello! It's concert bot that will help you to go to the concert!`
            },
            [Lang.UK]: {
                greetingMessage: () => `–ü—Ä–∏–≤—ñ—Ç! –Ø –ö–æ–Ω—Ü–µ—Ä—Ç-–±–æ—Ç, –∑ –º–æ—î—é –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø—ñ—Ç–∏ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç!`
            },
            [Lang.RU]: {
                greetingMessage: () => `–ü—Ä–∏–≤–µ—Ç! –Ø –ö–æ–Ω—Ü–µ—Ä—Ç-–±–æ—Ç, —Å –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –ø–æ–π—Ç–∏ –Ω–∞ –∫–æ–Ω—Ü–µ—Ä—Ç!`
            }
        };
        return translations[lang].greetingMessage();
    }
}